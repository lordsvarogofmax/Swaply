import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
)

# –í–∫–ª—é—á–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GIVE, WANT = range(2)
SEARCH_QUERY, SEARCH_REGION = range(2, 4)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8341008966:AAHxnL0qaKoyfQSve6lRoopxnjFAS7u8mUg"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –ê–≤–∏—Ç–æ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ URL)
AVITO_REGIONS = {
    "–º–æ—Å–∫–≤–∞": "moskva",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt-peterburg",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–∫–∞–∑–∞–Ω—å": "kazan",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "nizhniy_novgorod",
    "—Å–∞–º–∞—Ä–∞": "samara",
    "–æ–º—Å–∫": "omsk",
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": "rostov-na-donu",
    "—É—Ñ–∞": "ufa",
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî Google Sheets –∏–ª–∏ –ë–î)
users_data = {}

# === –°–¢–ê–†–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –û–ë–ú–ï–ù ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Swaply, –±–æ—Ç –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –≤–µ—â–∞–º–∏ –±–µ–∑ –¥–µ–Ω–µ–≥.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –û–¢–î–ê–¢–¨."
    )
    return GIVE

async def get_give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    give_text = update.message.text
    users_data[user_id] = {"give": give_text}
    await update.message.reply_text(
        "üîÑ –û—Ç–ª–∏—á–Ω–æ! –ê —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ü–û–õ–£–ß–ò–¢–¨ –≤–∑–∞–º–µ–Ω?\n\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–î–µ—Ç—Å–∫–∏–π –≤–µ–ª–æ—Å–∏–ø–µ–¥, –¥–æ–ø–ª–∞—á—É 1000 ‚ÇΩ¬ª"
    )
    return WANT

async def get_want(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    want_text = update.message.text
    users_data[user_id]["want"] = want_text

    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –æ–±–º–µ–Ω!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username or '–Ω–µ—Ç username'} (ID: {user_id})\n"
        f"–û—Ç–¥–∞—ë—Ç: {users_data[user_id]['give']}\n"
        f"–•–æ—á–µ—Ç: {users_data[user_id]['want']}"
    )

    YOUR_ADMIN_ID = 364191893  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID!
    await context.bot.send_message(chat_id=YOUR_ADMIN_ID, text=admin_message)

    await update.message.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ! –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±–º–µ–Ω ‚Äî –Ω–∞–ø–∏—à—É!\n\n"
        "P.S. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ–±–º–µ–Ω? –ù–∞–ø–∏—à–∏ /start"
    )
    return ConversationHandler.END

# === –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –ü–û–ò–°–ö –ù–ê –ê–í–ò–¢–û ===
async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –î–∞–≤–∞–π –Ω–∞–π–¥—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–± –æ–±–º–µ–Ω–µ –Ω–∞ –ê–≤–∏—Ç–æ!\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–≤–µ–ª–æ—Å–∏–ø–µ–¥*, *iPhone*, *–∫–æ–ª—è—Å–∫–∞*)"
    )
    return SEARCH_QUERY

async def get_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏, —á—Ç–æ —Ç—ã –∏—â–µ—à—å.")
        return SEARCH_QUERY

    context.user_data["search_query"] = query

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
    buttons = []
    row = []
    for region in AVITO_REGIONS.keys():
        row.append(InlineKeyboardButton(region.title(), callback_data=f"region_{region}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω:", reply_markup=reply_markup)
    return SEARCH_REGION

async def region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    region_key = query.data.replace("region_", "")
    if region_key not in AVITO_REGIONS:
        await query.edit_message_text("‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return ConversationHandler.END

    search_query = context.user_data.get("search_query", "")
    avito_region = AVITO_REGIONS[region_key]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: "[—Ç–æ, —á—Ç–æ –∏—â–µ—à—å] –æ–±–º–µ–Ω"
    full_query = f"{search_query} –æ–±–º–µ–Ω"
    safe_query = full_query.replace(" ", "+")

    rss_url = f"https://www.avito.ru/{avito_region}?q={safe_query}&rss=1"
    search_url = f"https://www.avito.ru/{avito_region}?q={safe_query}&s=104"

    message = (
        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è RSS-—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å–ª–æ–≤–æ–º ¬´–æ–±–º–µ–Ω¬ª:\n\n"
        f"üìé <a href='{rss_url}'>RSS-–ª–µ–Ω—Ç–∞ –Ω–∞ –ê–≤–∏—Ç–æ</a>\n\n"
        f"üîç <a href='{search_url}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</a>\n\n"
        f"üí° –°–æ–≤–µ—Ç: –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏ ¬´üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫¬ª, "
        f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö."
    )

    await query.edit_message_text(message, parse_mode="HTML", disable_web_page_preview=True)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /search.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–º–µ–Ω–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_give)],
            WANT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_want)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
    search_handler = ConversationHandler(
        entry_points=[CommandHandler("search", search_start)],
        states={
            SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_search_query)],
            SEARCH_REGION: [CallbackQueryHandler(region_selected)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(search_handler)
    application.add_handler(CommandHandler("cancel", cancel))

    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
