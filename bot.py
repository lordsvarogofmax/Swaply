import os
import logging
import asyncio
import threading  # –¥–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ç–∞–º
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) ===
START, QUERY, CITY, EXCHANGE, PAYMENT = range(5)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8341008966:AAHxnL0qaKoyfQSve6lRoopxnjFAS7u8mUg"

CITIES = {
    "–ú–æ—Å–∫–≤–∞": "moskva",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt-peterburg",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–ö–∞–∑–∞–Ω—å": "kazan",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "nizhniy_novgorod",
    "–°–∞–º–∞—Ä–∞": "samara",
    "–û–º—Å–∫": "omsk",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "rostov-na-donu",
    "–£—Ñ–∞": "ufa",
}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏", callback_data="start_search")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ Avito.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É ‚Äî "
        "—Å —É—á—ë—Ç–æ–º –≥–æ—Ä–æ–¥–∞, –æ–±–º–µ–Ω–∞ –∏ –¥–æ–ø–ª–∞—Ç—ã.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=reply_markup
    )
    return START

async def start_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîç –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–≤–µ–ª–æ—Å–∏–ø–µ–¥*, *iPhone 13*, *–∫–æ–ª—è—Å–∫–∞*)")
    return QUERY

async def get_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.")
        return QUERY
    context.user_data["query"] = text
    buttons = [[InlineKeyboardButton(city, callback_data=f"city_{city}")] for city in CITIES.keys()]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å?", reply_markup=reply_markup)
    return CITY

async def city_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city_name = query.data.replace("city_", "")
    if city_name not in CITIES:
        await query.edit_message_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return ConversationHandler.END
    context.user_data["city"] = city_name
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="exchange_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="exchange_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üîÑ –•–æ—á–µ—à—å –æ–±–º–µ–Ω?", reply_markup=reply_markup)
    return EXCHANGE

async def exchange_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == "exchange_no":
        context.user_data["exchange"] = False
        await generate_avito_link(update, context)
        return ConversationHandler.END
    else:
        context.user_data["exchange"] = True
        keyboard = [
            [InlineKeyboardButton("–° –¥–æ–ø–ª–∞—Ç–æ–π", callback_data="payment_yes")],
            [InlineKeyboardButton("–ë–µ–∑ –¥–æ–ø–ª–∞—Ç—ã", callback_data="payment_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üí∞ –° –¥–æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑?", reply_markup=reply_markup)
        return PAYMENT

async def payment_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    context.user_data["with_payment"] = (choice == "payment_yes")
    await generate_avito_link(update, context)
    return ConversationHandler.END

async def generate_avito_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = context.user_data["query"]
    city_name = context.user_data["city"]
    city_code = CITIES[city_name]
    exchange = context.user_data.get("exchange", False)
    with_payment = context.user_data.get("with_payment", False)

    search_terms = [query]
    if exchange:
        search_terms.append("–æ–±–º–µ–Ω")
        if with_payment:
            search_terms.append("–¥–æ–ø–ª–∞—Ç–∞")
        else:
            search_terms.append("–±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã")

    full_query = " ".join(search_terms)
    safe_query = full_query.replace(" ", "+")
    avito_url = f"https://www.avito.ru/{city_code}?q={safe_query}&s=104"

    message = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üîó <a href='{avito_url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Avito</a>\n\n"
        "üí° –°–æ–≤–µ—Ç: –Ω–∞–∂–º–∏ ¬´üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫¬ª –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, "
        "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö."
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(
            message, parse_mode="HTML", disable_web_page_preview=True
        )
    else:
        await update.message.reply_text(
            message, parse_mode="HTML", disable_web_page_preview=True
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# === Flask + Webhook ===

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        START: [CallbackQueryHandler(start_search_callback, pattern="^start_search$")],
        QUERY: [MessageHandler(~filters.COMMAND, get_query)],
        CITY: [CallbackQueryHandler(city_selected, pattern="^city_")],
        EXCHANGE: [CallbackQueryHandler(exchange_selected, pattern="^exchange_(yes|no)$")],
        PAYMENT: [CallbackQueryHandler(payment_selected, pattern="^payment_(yes|no)$")],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(conv_handler)

_webhook_set = threading.Event()

@app.before_request
def setup_webhook_once():
    if not _webhook_set.is_set():
        with app.app_context():
            render_url = os.environ.get("RENDER_EXTERNAL_URL", "").rstrip("/")
            webhook_url = f"{render_url}/{BOT_TOKEN}"
            asyncio.run(application.bot.set_webhook(url=webhook_url))
            logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            _webhook_set.set()

@app.route("/<path:token>", methods=["POST"])
def telegram_webhook(token):
    if token != BOT_TOKEN:
        return "Forbidden", 403
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return "OK"

@app.route("/health")
def health():
    return "OK"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
