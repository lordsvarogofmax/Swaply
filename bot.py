import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import httpx

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8341008966:AAHxnL0qaKoyfQSve6lRoopxnjFAS7u8mUg"
OPENROUTER_API_KEY = "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"
MODEL = "qwen/qwen-2.5-7b-instruct"  # –õ—É—á—à–∏–π –±–∞–ª–∞–Ω—Å: –∫–∞—á–µ—Å—Ç–≤–æ + —Å–∫–æ—Ä–æ—Å—Ç—å + –±–µ—Å–ø–ª–∞—Ç–Ω–æ

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üë∑‚Äç‚ôÇÔ∏è **–Ø ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.**\n\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:\n"
        "‚Ä¢ –†–µ–º–æ–Ω—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤\n"
        "‚Ä¢ –û—Ç–¥–µ–ª–∫–µ (—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞, –ø–æ–∫—Ä–∞—Å–∫–∞, –ø–ª–∏—Ç–∫–∞)\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–µ –∏ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–µ\n"
        "‚Ä¢ –í—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –†–∞—Å—á—ë—Ç–µ —Å–º–µ—Ç –∏ —Å—Ä–æ–∫–æ–≤\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ**: —è –æ—Ç–≤–µ—á–∞—é **—Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞**. "
        "–ù–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂—É—Å—å.\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë."
    )
    keyboard = [[InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="ask")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ===
async def ask_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "‚Ä¢ –ö–∞–∫ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Å—Ç–µ–Ω—ã –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–æ–º?\n"
        "‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –≤ –≤–∞–Ω–Ω–æ–π –ø–æ–¥ –ø–ª–∏—Ç–∫—É?\n"
        "‚Ä¢ –ö–∞–∫–æ–π –∫—Ä–∞—Å–∫–æ–π –ø–æ–∫—Ä–∞—Å–∏—Ç—å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ–ª?\n\n"
        "–Ø –¥–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    context.user_data["in_consultation"] = True

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start)
    if not context.user_data.get("in_consultation", False):
        await start(update, context)
        return

    user_text = update.message.text.strip()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ
    system_prompt = (
    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. "
    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∏ —Ä–µ–º–æ–Ω—Ç—É. "
    "–í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. "
    "–û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –æ–±—ä—è—Å–Ω—è–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. "
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî 500 —Å–ª–æ–≤."
)

    full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_text}"

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": MODEL,
                    "messages": [{"role": "user", "content": full_prompt}],
                    "max_tokens": 800
                }
            )
            if response.status_code != 200:
                raise Exception(f"HTTP {response.status_code}: {response.text}")

            data = response.json()
            answer = data["choices"][0]["message"]["content"].strip()

            # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å"
            keyboard = [[InlineKeyboardButton("üîÑ –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –∏–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                answer,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        )

# === Flask + Webhook ===
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(ask_callback, pattern="^ask$"))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
_loop = asyncio.new_event_loop()
asyncio.set_event_loop(_loop)
_loop.run_until_complete(application.initialize())

@app.route("/<path:token>", methods=["POST"])
def telegram_webhook(token):
    if token != BOT_TOKEN:
        return "Forbidden", 403
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    _loop.run_until_complete(application.process_update(update))
    return "OK"

@app.route("/health")
def health():
    return "OK"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
