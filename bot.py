import os
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# === –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –î–û –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
START, QUERY, CITY, EXCHANGE, PAYMENT = range(5)

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "8341008966:AAHxnL0qaKoyfQSve6lRoopxnjFAS7u8mUg"
CITIES = {
    "–ú–æ—Å–∫–≤–∞": "moskva",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt-peterburg",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–ö–∞–∑–∞–Ω—å": "kazan",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "nizhniy_novgorod",
    "–°–∞–º–∞—Ä–∞": "samara",
    "–û–º—Å–∫": "omsk",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "rostov-na-donu",
    "–£—Ñ–∞": "ufa",
}

# === –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏", callback_data="start_search")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ Avito.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É ‚Äî "
        "—Å —É—á—ë—Ç–æ–º –≥–æ—Ä–æ–¥–∞, –æ–±–º–µ–Ω–∞ –∏ –¥–æ–ø–ª–∞—Ç—ã.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=reply_markup
    )
    return START

async def start_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîç –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–≤–µ–ª–æ—Å–∏–ø–µ–¥*, *iPhone 13*, *–∫–æ–ª—è—Å–∫–∞*)")
    return QUERY

async def get_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.")
        return QUERY
    context.user_data["query"] = text
    buttons = [[InlineKeyboardButton(city, callback_data=f"city_{city}")] for city in CITIES.keys()]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å?", reply_markup=reply_markup)
    return CITY

async def city_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city_name = query.data.replace("city_", "")
    if city_name not in CITIES:
        await query.edit_message_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return ConversationHandler.END
    context.user_data["city"] = city_name
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="exchange_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="exchange_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üîÑ –•–æ—á–µ—à—å –æ–±–º–µ–Ω?", reply_markup=reply_markup)
    return EXCHANGE

async def exchange_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == "exchange_no":
        context.user_data["exchange"] = False
        await generate_avito_link(update, context)
        return ConversationHandler.END
    else:
        context.user_data["exchange"] = True
        keyboard = [
            [InlineKeyboardButton("–° –¥–æ–ø–ª–∞—Ç–æ–π", callback_data="payment_yes")],
            [InlineKeyboardButton("–ë–µ–∑ –¥–æ–ø–ª–∞—Ç—ã", callback_data="payment_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üí∞ –° –¥–æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑?", reply_markup=reply_markup)
        return PAYMENT

async def payment_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    context.user_data["with_payment
