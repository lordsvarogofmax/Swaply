import os
import logging
import asyncio
import sqlite3
import json
from flask import Flask, request, send_file
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import httpx
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from datetime import datetime, timedelta
from selectolax.parser import HTMLParser
from dotenv import load_dotenv
import glob
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
import tempfile

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY", "")
MODEL = os.environ.get("OPENROUTER_MODEL", "meta-llama/llama-3.1-70b-instruct")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "364191893"))

if not BOT_TOKEN or not OPENROUTER_API_KEY:
    error_msg = "‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:\n"
    if not BOT_TOKEN:
        error_msg += "‚Ä¢ BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω\n"
    if not OPENROUTER_API_KEY:
        error_msg += "‚Ä¢ OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω\n"
    error_msg += "\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n"
    error_msg += "BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather\n"
    error_msg += "OPENROUTER_API_KEY=–≤–∞—à_–∫–ª—é—á_openrouter\n"
    error_msg += "ADMIN_ID=364191893\n"
    error_msg += "PORT=10000"
    
    print(error_msg)
    logging.error(error_msg)
    exit(1)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_database():
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            session_id TEXT,
            feedback_given BOOLEAN DEFAULT FALSE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            interaction_id INTEGER,
            rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
            comment TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (interaction_id) REFERENCES user_interactions (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def save_interaction(user_id, username, first_name, last_name, question, answer, session_id=None):
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_interactions (user_id, username, first_name, last_name, question, answer, session_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, question, answer, session_id))
    interaction_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return interaction_id

def save_feedback(user_id, interaction_id, rating, comment):
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO feedback (user_id, interaction_id, rating, comment)
        VALUES (?, ?, ?, ?)
    ''', (user_id, interaction_id, rating, comment))
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –±—ã–ª–∞ –¥–∞–Ω–∞
    cursor.execute('''
        UPDATE user_interactions SET feedback_given = TRUE WHERE id = ?
    ''', (interaction_id,))
    
    conn.commit()
    conn.close()

def get_user_interaction_count(user_id, days=30):
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT COUNT(*) FROM user_interactions 
        WHERE user_id = ? AND timestamp >= datetime('now', '-{} days')
    '''.format(days), (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

def has_given_feedback(user_id, interaction_id):
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT COUNT(*) FROM feedback WHERE user_id = ? AND interaction_id = ?
    ''', (user_id, interaction_id))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

def get_admin_stats(days=30):
    conn = sqlite3.connect('bot_feedback.db')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    query = '''
        SELECT 
            ui.user_id,
            ui.username,
            ui.first_name,
            ui.last_name,
            ui.question,
            ui.answer,
            ui.timestamp,
            f.rating,
            f.comment
        FROM user_interactions ui
        LEFT JOIN feedback f ON ui.id = f.interaction_id
        WHERE ui.timestamp >= datetime('now', '-{} days')
        ORDER BY ui.timestamp DESC
    '''.format(days)
    
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ ===
def add_to_conversation_history(user_data, question, answer):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'conversation_history' not in user_data:
        user_data['conversation_history'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    user_data['conversation_history'].append({
        'question': question,
        'answer': answer,
        'timestamp': datetime.now().isoformat()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–∞—Ä–∞–º–∏ (20 —Å–æ–æ–±—â–µ–Ω–∏–π)
    if len(user_data['conversation_history']) > 10:
        user_data['conversation_history'] = user_data['conversation_history'][-10:]
    
    return user_data['conversation_history']

def get_conversation_context(user_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ò–ò"""
    if 'conversation_history' not in user_data or not user_data['conversation_history']:
        return ""
    
    context_parts = []
    for i, entry in enumerate(user_data['conversation_history'], 1):
        context_parts.append(f"–í–æ–ø—Ä–æ—Å {i}: {entry['question']}")
        context_parts.append(f"–û—Ç–≤–µ—Ç {i}: {entry['answer']}")
    
    return "\n\n".join(context_parts)

def clear_conversation_history(user_data):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data['conversation_history'] = []
    return user_data

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ base_knowledge/*.txt ===
_knowledge_chunks = []
knowledge_dir = "base_knowledge"

if os.path.exists(knowledge_dir):
    txt_files = sorted(glob.glob(os.path.join(knowledge_dir, "*.txt")))
    if not txt_files:
        print("‚ö†Ô∏è –í –ø–∞–ø–∫–µ base_knowledge –Ω–µ—Ç .txt —Ñ–∞–π–ª–æ–≤")
    for path in txt_files:
        try:
            with open(path, "r", encoding="utf-8") as f:
                text = f.read().strip()
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ ~500 —Å–ª–æ–≤
                sentences = text.split(". ")
                current_chunk = ""
                for sent in sentences:
                    if len(current_chunk.split()) + len(sent.split()) > 500:
                        if len(current_chunk) > 50:
                            _knowledge_chunks.append(current_chunk.strip())
                        current_chunk = sent + ". "
                    else:
                        current_chunk += sent + ". "
                if current_chunk and len(current_chunk) > 50:
                    _knowledge_chunks.append(current_chunk.strip())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_knowledge_chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ base_knowledge/")
else:
    print("‚ùå –ü–∞–ø–∫–∞ base_knowledge –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
if _knowledge_chunks:
    _vectorizer = TfidfVectorizer(stop_words=None)
    _vectorizer.fit(_knowledge_chunks)
    _knowledge_ready = True
else:
    _knowledge_ready = False

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üë∑‚Äç‚ôÇÔ∏è **–Ø ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞.**\n\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:\n"
        "‚Ä¢ –†–µ–º–æ–Ω—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤\n"
        "‚Ä¢ –û—Ç–¥–µ–ª–∫–µ (—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞, –ø–æ–∫—Ä–∞—Å–∫–∞, –ø–ª–∏—Ç–∫–∞)\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–µ –∏ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–µ\n"
        "‚Ä¢ –í—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –†–∞—Å—á—ë—Ç–µ —Å–º–µ—Ç –∏ —Å—Ä–æ–∫–æ–≤\n\n"
        "‚Ä¢ –û—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –°–ù–∏–ü–∞–º –∏ –ì–û–°–¢–∞–º\n\n"
        "üí¨ **–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞**: –Ø –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. "
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: —è –æ—Ç–≤–µ—á–∞—é **—Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞**.\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë."
    )
    keyboard = [[InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="ask")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ===
async def ask_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    conversation_history = context.user_data.get('conversation_history', [])
    history_count = len(conversation_history)
    
    if history_count >= 10:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10 –ø–∞—Ä, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        clear_conversation_history(context.user_data)
        await query.edit_message_text(
            "üîÑ **–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞**\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "‚Ä¢ –ö–∞–∫ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Å—Ç–µ–Ω—ã –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–æ–º?\n"
            "‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –≤ –≤–∞–Ω–Ω–æ–π –ø–æ–¥ –ø–ª–∏—Ç–∫—É?\n"
            "‚Ä¢ –ö–∞–∫–æ–π –∫—Ä–∞—Å–∫–æ–π –ø–æ–∫—Ä–∞—Å–∏—Ç—å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ–ª?\n\n"
            "–Ø –¥–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤."
        )
    else:
        await query.edit_message_text(
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "‚Ä¢ –ö–∞–∫ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Å—Ç–µ–Ω—ã –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–æ–º?\n"
            "‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –≤ –≤–∞–Ω–Ω–æ–π –ø–æ–¥ –ø–ª–∏—Ç–∫—É?\n"
            "‚Ä¢ –ö–∞–∫–æ–π –∫—Ä–∞—Å–∫–æ–π –ø–æ–∫—Ä–∞—Å–∏—Ç—å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ–ª?\n\n"
            "–Ø –¥–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤."
        )
    
    context.user_data["in_consultation"] = True

# === –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ===
def retrieve_relevant_chunks(query, top_k=3):
    if not _knowledge_ready:
        return []
    query_vec = _vectorizer.transform([query])
    knowledge_vecs = _vectorizer.transform(_knowledge_chunks)
    similarities = cosine_similarity(query_vec, knowledge_vecs).flatten()
    top_indices = similarities.argsort()[-top_k:][::-1]
    return [_knowledge_chunks[i] for i in top_indices if similarities[i] > 0.1]

# === –ò—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ docs.cntd.ru ===

async def search_cntd(query: str, max_chars=1500) -> str:
    try:
        async with httpx.AsyncClient(
            timeout=10.0,
            follow_redirects=True,
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "Upgrade-Insecure-Requests": "1",
                "Sec-Fetch-Dest": "document",
                "Sec-Fetch-Mode": "navigate",
                "Sec-Fetch-Site": "none",
                "Sec-Fetch-User": "?1",
            }
        ) as client:
            search_url = f"https://docs.cntd.ru/search?text={query}"
            response = await client.get(search_url)
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            tree = HTMLParser(response.text)
            results = []
            for item in tree.css("div.search-results__item"):
                title_node = item.css_first("a")
                if not title_node:
                    continue
                title = title_node.text().strip()
                href = title_node.attributes.get("href")
                if not href or not href.startswith("/document/"):
                    continue
                status_node = item.css_first("span.document-info__status")
                status = status_node.text().strip().lower() if status_node else ""
                if "–æ—Ç–º–µ–Ω" in status or "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç" in status:
                    continue
                results.append({"title": title, "url": "https://docs.cntd.ru" + href})

            if not results:
                return ""

            doc_url = results[0]["url"]
            doc_resp = await client.get(doc_url)
            doc_tree = HTMLParser(doc_resp.text)
            content = ""
            for p in doc_tree.css("div.document-content p"):
                text = p.text().strip()
                if text and len(text) > 20:
                    content += text + "\n"
                    if len(content) > max_chars:
                        break

            return f"[–ò—Å—Ç–æ—á–Ω–∏–∫: {results[0]['title']}]\n{content[:max_chars]}..." if content else ""

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ cntd.ru: {e}")
        return ""
        
# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ===
async def handle_feedback_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not query.data.startswith("rating_"):
        return
    
    rating = int(query.data.split("_")[1])
    interaction_id = context.user_data.get("current_interaction_id")
    
    if not interaction_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    save_feedback(update.effective_user.id, interaction_id, rating, None)
    
    await query.edit_message_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} –∑–≤–µ–∑–¥! "
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask")],
            [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment")]
        ])
    )

async def handle_comment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ. "
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    context.user_data["waiting_for_comment"] = True

async def handle_feedback_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("waiting_for_comment"):
        return
    
    comment = update.message.text.strip()
    interaction_id = context.user_data.get("current_interaction_id")
    
    if not interaction_id:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ
    conn = sqlite3.connect('bot_feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE feedback SET comment = ? WHERE interaction_id = ? AND user_id = ?
    ''', (comment, interaction_id, update.effective_user.id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask")
        ]])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("current_interaction_id", None)
    context.user_data.pop("waiting_for_comment", None)

# === –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ===
async def handle_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        df = get_admin_stats(30)
        
        if df.empty:
            await update.message.reply_text("üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", 
            "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal='center')
        
        # –î–∞–Ω–Ω—ã–µ
        for row_idx, (_, row) in enumerate(df.iterrows(), 2):
            ws.cell(row=row_idx, column=1, value=row['user_id'])
            ws.cell(row=row_idx, column=2, value=row['username'] or '')
            ws.cell(row=row_idx, column=3, value=row['first_name'] or '')
            ws.cell(row=row_idx, column=4, value=row['last_name'] or '')
            ws.cell(row=row_idx, column=5, value=row['question'][:100] + '...' if len(str(row['question'])) > 100 else row['question'])
            ws.cell(row=row_idx, column=6, value=row['answer'][:100] + '...' if len(str(row['answer'])) > 100 else row['answer'])
            ws.cell(row=row_idx, column=7, value=row['timestamp'])
            ws.cell(row=row_idx, column=8, value=row['rating'] if pd.notna(row['rating']) else '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
            ws.cell(row=row_idx, column=9, value=row['comment'] or '')
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            wb.save(tmp_file.name)
            tmp_file_path = tmp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(tmp_file_path, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename=f"bot_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
                       f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(df)}\n"
                       f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {df['user_id'].nunique()}\n"
                       f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {df['rating'].mean():.2f}" if not df['rating'].isna().all() else "–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file_path)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if context.user_data.get("waiting_for_comment"):
        await handle_feedback_comment(update, context)
        return
    
    if not context.user_data.get("in_consultation", False):
        await start(update, context)
        return

    user_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã?
    is_normative = any(word in user_text.lower() for word in [
        "—Å–Ω–∏–ø", "–≥–æ—Å—Ç", "—Å–ø ", "—Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª", "–∞–∫—Ç—É–∞–ª—å–Ω", "–¥–µ–π—Å—Ç–≤—É–µ—Ç",
        "–Ω–æ–≤—ã–π", "–Ω–æ—Ä–º—ã", "—Ç—Ä–µ–±–æ–≤–∞–Ω", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "2025", "2024", "–æ–±–Ω–æ–≤–ª"
    ])

    relevant_chunks = []
    online_context = ""

    if is_normative:
        online_context = await search_cntd(user_text)
        if not online_context:
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            relevant_chunks = retrieve_relevant_chunks(user_text)
    else:
        relevant_chunks = retrieve_relevant_chunks(user_text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if online_context:
        knowledge_context = online_context
    elif relevant_chunks:
        knowledge_context = "\n\n".join(relevant_chunks)
    else:
        knowledge_context = "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    conversation_context = get_conversation_context(context.user_data)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ–¥–∞
    current_year = datetime.now().year
    system_prompt = (
        f"–°–µ–≥–æ–¥–Ω—è {current_year} –≥–æ–¥. –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. "
        "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∏ —Ä–µ–º–æ–Ω—Ç—É. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å. "
        "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
        "–ù–ï –ü–ò–®–ò –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –§–†–ê–ó–´ –í–†–û–î–ï ¬´–Ø –¥—É–º–∞—é¬ª. "
        "–ü–ò–®–ò –ö–ê–ö –≠–ö–°–ü–ï–†–¢: –ö–†–ê–¢–ö–û, –¢–û–ß–ù–û, –ü–û –î–ï–õ–£. "
        "–ú–ê–ö–°–ò–ú–£–ú ‚Äî 400 —Å–ª–æ–≤."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    if conversation_context:
        conversation_part = f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n{conversation_context}\n\n"
    else:
        conversation_part = ""

    if online_context or relevant_chunks:
        user_prompt = (
            f"{conversation_part}"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤:\n{knowledge_context}\n\n"
            f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_text}\n\n"
            f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
        )
    else:
        user_prompt = f"{conversation_part}–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_text}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."

    await update.message.reply_text("‚è≥ –ú–∏–Ω—É—Ç–∫—É, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...")
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter: {user_prompt[:200]}...")

    try:
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ]
        last_error = None
        for attempt in range(3):
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.post(
                        "https://openrouter.ai/api/v1/chat/completions",
                        headers={
                            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                            "Content-Type": "application/json"
                        },
                        json={
                            "model": MODEL,
                            "messages": messages,
                            "max_tokens": 1000,
                            "temperature": 0.3
                        }
                    )
                if response.status_code == 200:
                    data = response.json()
                    answer = data["choices"][0]["message"]["content"].strip()
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {answer[:200]}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                    user = update.effective_user
                    interaction_id = save_interaction(
                        user.id, 
                        user.username, 
                        user.first_name, 
                        user.last_name, 
                        user_text, 
                        answer
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                    add_to_conversation_history(context.user_data, user_text, answer)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (–ø–æ—Å–ª–µ 3-–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
                    interaction_count = get_user_interaction_count(user.id)
                    
                    if interaction_count == 3 and not has_given_feedback(user.id, interaction_id):
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
                        keyboard = [
                            [InlineKeyboardButton("‚≠ê", callback_data="rating_1")]
                            [InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rating_2")]
                            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rating_3")],
                            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_4")]
                            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_5")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await update.message.reply_text(
                            f"{answer}\n\n"
                            "üìä **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:**\n"
                            "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ–π –±—ã–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? (1-5 –∑–≤–µ–∑–¥)",
                            reply_markup=reply_markup,
                            disable_web_page_preview=True,
                            parse_mode="Markdown"
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                        context.user_data["current_interaction_id"] = interaction_id
                    else:
                        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                        conversation_history = context.user_data.get('conversation_history', [])
                        history_count = len(conversation_history)
                        remaining = 10 - history_count
                        
                        keyboard = [[InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await update.message.reply_text(
                            answer,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                    break
                else:
                    last_error = f"HTTP {response.status_code}: {response.text}"
                    logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}")
            except Exception as inner_e:
                last_error = str(inner_e)
                logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/3 –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π: {last_error}")
            await asyncio.sleep(1.5 * (attempt + 1))

        else:
            raise Exception(last_error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        )

# === Flask + Webhook ===
app = Flask(__name__)

application = Application.builder().token(BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("stats", handle_admin_stats))
application.add_handler(CallbackQueryHandler(ask_callback, pattern="^ask$"))
application.add_handler(CallbackQueryHandler(handle_feedback_rating, pattern="^rating_"))
application.add_handler(CallbackQueryHandler(handle_comment_callback, pattern="^comment$"))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

_loop = asyncio.new_event_loop()
asyncio.set_event_loop(_loop)
_loop.run_until_complete(application.initialize())

@app.route("/<path:token>", methods=["POST"])
def telegram_webhook(token):
    if token != BOT_TOKEN:
        return "Forbidden", 403
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    _loop.run_until_complete(application.process_update(update))
    return "OK"

@app.route("/health")
def health():
    return "OK"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
